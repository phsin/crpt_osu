
Процедура Пауза(ЗадержкаСекунд = 5 ) Экспорт 	
	
	Если НЕ ЗначениеЗаполнено(ЗадержкаСекунд) Тогда 
		КолвоСекунд = 5;
	Иначе 
		КолвоСекунд = ЗадержкаСекунд;
	КонецЕсли;
	СообщитьИнфо("Пауза "+КолвоСекунд+" сек");
	// СтрокаЗапроса = "ping -n 1 -w "+Формат(1000 * ЗадержкаСекунд, "ЧДЦ=0; ЧГ=") + " 127.255.255.255"; 
	СтрокаЗапроса = "Timeout /T " + Формат(КолвоСекунд, "ЧГ=0") + " /NoBreak";
	WshShell = Новый COMОбъект("WScript.Shell"); 
	WshShell.Run(СтрокаЗапроса, 0, -1); 
	
КонецПроцедуры 

Процедура СообщитьИнфо(
		Знач ТекстСообщения,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт

//	
//	Сообщение = Новый СообщениеПользователю;
//	Сообщение.Текст = Лев(ТекстСообщения, 200);
//	Сообщение.Поле = "";
//	
//	ЭтоОбъект = Ложь;
//	
//#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
//	Если КлючДанных <> Неопределено
//	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
//		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
//		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
//	КонецЕсли;
//#КонецЕсли
//	
//	Если ЭтоОбъект Тогда
//		Сообщение.УстановитьДанные(КлючДанных);
//	Иначе
//		Сообщение.КлючДанных = КлючДанных;
//	КонецЕсли;
//	
//	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
//		Сообщение.ПутьКДанным = ПутьКДанным;
//	КонецЕсли;
//		
//	Сообщение.Сообщить();
//	
//	Отказ = Истина;

	ОбщегоНазначения.СообщитьПользователю( ТекстСообщения,
		КлючДанных,
		Поле,
		ПутьКДанным,
		Отказ);

КонецПроцедуры

Функция ПолучитьЗначениеРевизитаОбъекта_НаСервере( ВыбОбъект, Реквизит ) Экспорт
	
	Попытка
		Возврат ВыбОбъект[Реквизит];
	Исключение
		СообщитьИнфо("Указан неверный реквизит "+Реквизит+" для объекта "+ВыбОбъект);
		СообщитьИнфо(ОписаниеОшибки());
		Возврат "";
	КонецПопытки
	
КонецФункции

Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
	
	ПараметрыОрганизации = кб99_Общие.НайтиПараметры( ПараметрыСеанса.ТекущийПользователь );
	Возврат ПараметрыОрганизации.Организация;
	
КонецФункции

Функция ПолучитьДатуАктуальностиПартий() Экспорт
	
	ПараметрыОрганизации = кб99_Общие.НайтиПараметры( ПараметрыСеанса.ТекущийПользователь );
	
	Если ЗначениеЗаполнено(ПараметрыОрганизации.ВСД_Площадка.ДатаАктуальностиПартий) Тогда
		ВыбДата = ПараметрыОрганизации.Отправитель_Площадка.ДатаАктуальностиПартий;
	Иначе
		ВыбДата = ТекущаяДата()- 31536000; // Загружаем за год
	КонецЕсли;
	
	Возврат ВыбДата;
	
КонецФункции

#Область Параметры

Функция НайтиПараметры( ВыбПользователь = Неопределено, ВыбОрганизация=Неопределено ) Экспорт
	//	Если ВыбФорма.флСохранятьНастройкиДляТекущегоПользователя Тогда 
	//	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	//Иначе
	//	ТекПользователь = ВыбФорма.Организация;
	//КонецЕсли;
	Если ВыбПользователь = Неопределено Тогда
		ВыбПользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	НайденныеПараметры = Справочники.кб99_Параметры.ПустаяСсылка();
	Если ЗначениеЗаполнено(ВыбОрганизация) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	кб99_Параметры.Ссылка КАК Ссылка,
		               |	кб99_Параметры.ИспользоватьПоУмолчанию КАК ПоУмолчанию
		               |ИЗ
		               |	Справочник.кб99_Параметры КАК кб99_Параметры
		               |ГДЕ
		               |	кб99_Параметры.Пользователь = &Пользователь
		               |	И кб99_Параметры.Организация = &Организация
		               |	И НЕ кб99_Параметры.ПометкаУдаления";
		Запрос.УстановитьПараметр("Пользователь", ВыбПользователь);
		Запрос.УстановитьПараметр("Организация", ВыбОрганизация);
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл 
			НайденныеПараметры = Результат.Ссылка;
			Если Результат.ПоУмолчанию Тогда
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(НайденныеПараметры) Тогда 
			СообщитьИнфо( "Параметры для пользователя "+ВыбПользователь+" организации "+ВыбОрганизация+" не определены, заполните параметры." );
		КонецЕсли;
		 
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	кб99_Параметры.Ссылка КАК Ссылка,
		               |	кб99_Параметры.ИспользоватьПоУмолчанию КАК ПоУмолчанию
		               |ИЗ
		               |	Справочник.кб99_Параметры КАК кб99_Параметры
		               |ГДЕ
		               |	кб99_Параметры.Пользователь = &Пользователь
		               |	И НЕ кб99_Параметры.ПометкаУдаления";
		Запрос.УстановитьПараметр("Пользователь", ВыбПользователь);
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл 
			НайденныеПараметры = Результат.Ссылка;
			Если Результат.ПоУмолчанию Тогда
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(НайденныеПараметры) Тогда 
			спрПараметры = Справочники.кб99_Параметры.СоздатьЭлемент();
			спрПараметры.Наименование = ВыбПользователь;
			спрПараметры.Пользователь = ВыбПользователь;
			спрПараметры.Записать();
			НайденныеПараметры = спрПараметры.Ссылка;
			
			СообщитьИнфо( "Параметры для пользователя "+ВыбПользователь+" не определены, заполните параметры.", спрПараметры.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденныеПараметры;

КонецФункции

Функция НайтиПараметрыНаСервере( Знач ВыбПользователь = Неопределено, ВыбОрганизация=Неопределено ) Экспорт
	
	Если ВыбПользователь = Неопределено Тогда
		ВыбПользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если ТипЗнч(ВыбПользователь) = Тип("ДокументСсылка.кб99_ВыводИзОборотаОСУ") Тогда 
		ВыбОрганизация = ВыбПользователь.Организация;
		ВыбПользователь = ПараметрыСеанса.ТекущийПользователь;		
	КонецЕсли;
	
	НайденныеПараметры = Справочники.кб99_Параметры.ПустаяСсылка();
	Если ЗначениеЗаполнено(ВыбОрганизация) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	кб99_Параметры.Ссылка КАК Ссылка,
		               |	кб99_Параметры.ИспользоватьПоУмолчанию КАК ПоУмолчанию
		               |ИЗ
		               |	Справочник.кб99_Параметры КАК кб99_Параметры
		               |ГДЕ
		               |	кб99_Параметры.Пользователь = &Пользователь
		               |	И кб99_Параметры.Организация = &Организация
		               |	И НЕ кб99_Параметры.ПометкаУдаления";
		Запрос.УстановитьПараметр("Пользователь", ВыбПользователь);
		Запрос.УстановитьПараметр("Организация", ВыбОрганизация);
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл 
			НайденныеПараметры = Результат.Ссылка;
			Если Результат.ПоУмолчанию Тогда
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(НайденныеПараметры) Тогда 
			СообщитьИнфо( "Параметры для пользователя "+ВыбПользователь+" организации "+ВыбОрганизация+" не определены, заполните параметры." );
		КонецЕсли;
		 
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	кб99_Параметры.Ссылка КАК Ссылка,
		               |	кб99_Параметры.ИспользоватьПоУмолчанию КАК ПоУмолчанию
		               |ИЗ
		               |	Справочник.кб99_Параметры КАК кб99_Параметры
		               |ГДЕ
		               |	кб99_Параметры.Пользователь = &Пользователь
		               |	И НЕ кб99_Параметры.ПометкаУдаления";
		Запрос.УстановитьПараметр("Пользователь", ВыбПользователь);
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл 
			НайденныеПараметры = Результат.Ссылка;
			Если Результат.ПоУмолчанию Тогда
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(НайденныеПараметры) Тогда 
			спрПараметры = Справочники.кб99_Параметры.СоздатьЭлемент();
			спрПараметры.Наименование = ВыбПользователь;
			спрПараметры.Пользователь = ВыбПользователь;
			спрПараметры.Записать();
			НайденныеПараметры = спрПараметры.Ссылка;
			
			СообщитьИнфо( "Параметры для пользователя "+ВыбПользователь+" не определены, заполните параметры.", спрПараметры.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	//ПараметрыПользователя = Новый Соответствие();
	ПараметрыПользователя = новый Структура();
	ПараметрыПользователя.Вставить("Пользователь", ВыбПользователь);
	ПараметрыПользователя.Вставить("Ссылка", НайденныеПараметры.Ссылка);
	ПараметрыПользователя.Вставить("Отпечаток", НайденныеПараметры.Отпечаток);
	ПараметрыПользователя.Вставить("Токен", НайденныеПараметры.Токен);
	ПараметрыПользователя.Вставить("СохранятьЗапросы", НайденныеПараметры.СохранятьЗапросы);
	ПараметрыПользователя.Вставить("Организация", НайденныеПараметры.Организация);
	ПараметрыПользователя.Вставить("ТестовыйКонтур", НайденныеПараметры.ТестовыйКонтур);
	ПараметрыПользователя.Вставить("ПаузаСек", НайденныеПараметры.ПаузаСек);
	ПараметрыПользователя.Вставить("СохранятьЗапросы", НайденныеПараметры.СохранятьЗапросы);
	ПараметрыПользователя.Вставить("ВыводитьСообщенияДляОтладки", НайденныеПараметры.ВыводитьСообщенияДляОтладки);
	ПараметрыПользователя.Вставить("СрокДействияТокена", НайденныеПараметры.СрокДействияТокена);	
	
	Возврат ПараметрыПользователя;

КонецФункции


Функция ЗагрузитьПараметры( _Организация, ВладелецНастроек = Неопределено  ) Экспорт
	// ВладелецНастроек в параметрах - тогда можно загрузить настройки любого пользователя, а не текущего
	КлючОбъекта = "Обработка.кб99_crpt.Форма.Форма";
  	Если ВладелецНастроек = Неопределено Тогда
		ВладелецНастроек = ИмяПользователя();
	КонецЕсли;
	
	Попытка
		 // Проверим, как хранятся настройки у конкретного пользователя: Личные или по организации
		флСохранятьНастройкиДляТекущегоПользователя = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,"Настройки_CRPT",,ВладелецНастроек); // на пользователя
		 
		Если (флСохранятьНастройкиДляТекущегоПользователя = Неопределено) или НЕ флСохранятьНастройкиДляТекущегоПользователя Тогда 		 
			флСохранятьНастройкиДляТекущегоПользователя = Ложь;
			
			СписокПараметров = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, _Организация.УникальныйИдентификатор(), , _Организация.УникальныйИдентификатор());
		Иначе 
		 	СписокПараметров = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, _Организация.УникальныйИдентификатор(), , ВладелецНастроек); 
		КонецЕсли;
	Исключение
		СообщитьИнфо("Нет прав на восстановление настроек.");
	КонецПопытки;

	Если СписокПараметров = Неопределено Тогда
		СообщитьИнфо("Не удалось загрузить настройки "+_Организация+" - "+КлючОбъекта+" - "+ВладелецНастроек);
		СписокПараметров = Новый("Структура");
	КонецЕсли;

	СписокПараметров.Вставить("Организация", _Организация );
	СписокПараметров.Вставить("флСохранятьНастройкиДляТекущегоПользователя",флСохранятьНастройкиДляТекущегоПользователя);
	Возврат СписокПараметров;

КонецФункции

Функция ПараметрыСервер( ФОбъект ) Экспорт
		
	Параметры = Новый("Структура");   		
	Параметры.Вставить("Организация", ФОбъект.Организация );
	//Параметры.Вставить("КаталогИнтеграции", ФОбъект.КаталогИнтеграции );
	//Параметры.Вставить("КаталогЛогов", ФОбъект.КаталогЛогов );		
	Параметры.Вставить("Отпечаток", ФОбъект.Отпечаток);
	Параметры.Вставить("ClientToken", ФОбъект.clientToken);
	Параметры.Вставить("OmsId", ФОбъект.OmsId);	
	Параметры.Вставить("ВыводитьСообщенияДляОтладки", ФОбъект.ВыводитьСообщенияДляОтладки);
	Параметры.Вставить("СохранятьЗапросы", ФОбъект.СохранятьЗапросы);
	Параметры.Вставить("bearer", ФОбъект.Токен);
	Параметры.Вставить("param_username", ФОбъект.param_username);
	Параметры.Вставить("param_password", ФОбъект.param_password);	
	Параметры.Вставить("param_issuer_id", ФОбъект.param_issuer_id);	
	Параметры.Вставить("param_api_key", ФОбъект.param_api_key);	
	Параметры.Вставить("param_intiator_login", ФОбъект.param_intiator_login);	
	Параметры.Вставить("ВСД_Площадка", ФОбъект.ВСД_Площадка);	
	
	//Параметры.Вставить("Отправитель_Площадка", ФОбъект.Отправитель_Площадка);
	//Параметры.Вставить("Отправитель_ХозСубъект", ФОбъект.Отправитель_ХозСубъект );
	//
	//Параметры.Вставить("Страна", ФОбъект.Страна);
	//Параметры.Вставить("Регион", ФОбъект.Регион);
	//Параметры.Вставить("Город", ФОбъект.Город);
	//Параметры.Вставить("ВСД_Экспертиза", ФОбъект.ВСД_Экспертиза);
	//Параметры.Вставить("ВСД_Местность", ФОбъект.ВСД_Местность );
	//Параметры.Вставить("ВСД_ОсобыеОтметки", ФОбъект.ВСД_ОсобыеОтметки);
	//
	//Параметры.Вставить("ПаузаСек", ФОбъект.ПаузаСек);	
	//Параметры.Вставить("РеквизитГрузополучатель", ФОбъект.РеквизитГрузополучатель);	
	//		
	//Параметры.Вставить("ОтладкаЗапросовXML", ФОбъект.ОтладкаЗапросовXML);	
	//Параметры.Вставить("Перевозчик_ХозСубъект", ФОбъект.Перевозчик_ХозСубъект);		
	//Параметры.Вставить("ПропускатьПустыеСвойства", ФОбъект.ПропускатьПустыеСвойства);			
	//
	//Параметры.Вставить("КаталогЛогов", ФОбъект.КаталогЛогов);
	//
	//Параметры.Вставить("ВыводитьПодробнуюИнформацию", ФОбъект.ВыводитьПодробнуюИнформацию);	
	//
	//Параметры.Вставить("Смещение", ФОбъект.Смещение);
	//Параметры.Вставить("АвтоЗаписьВСДСоответствия", ФОбъект.АвтоЗаписьВСДСоответствия);
	//Параметры.Вставить("НазваниеРеквизитаКоличество", ФОбъект.НазваниеРеквизитаКоличество);
	//Параметры.Вставить("ПарамКоэффициентПересчетаКоличества", ФОбъект.ПарамКоэффициентПересчетаКоличества);
	//Параметры.Вставить("ВСД_РезультатыИсследований", ФОбъект.ВСД_РезультатыИсследований);
	//Параметры.Вставить("ТермическиеУсловияПеревозки", ФОбъект.ТермическиеУсловияПеревозки);
	//Параметры.Вставить("ВСДЦель", ФОбъект.ВСДЦель);
	//Параметры.Вставить("ПарамЗаполнятьТранзакциюПриОтсутствииПартий", ФОбъект.ПарамЗаполнятьТранзакциюПриОтсутствииПартий);
	//Параметры.Вставить("ПарамНомерУровняУпаковкиДляВСД", ФОбъект.ПарамНомерУровняУпаковкиДляВСД);
	//Параметры.Вставить("ПарамФормаУпаковкиДляВСД", ФОбъект.ПарамФормаУпаковкиДляВСД);
	//Параметры.Вставить("НазваниеРеквизитаКоличествоМест", ФОбъект.НазваниеРеквизитаКоличествоМест);
	//Параметры.Вставить("НазваниеРеквизитаКоличествоМест", ФОбъект.НазваниеРеквизитаКоличествоМест);
	//
	//Параметры.Вставить("ПарамКолонкаСортировкиПартииСписания", ФОбъект.ПарамКолонкаСортировкиПартииСписания);
	//Параметры.Вставить("ПарамЗнакСортировкиУбывание", ФОбъект.ПарамЗнакСортировкиУбывание);
	//Параметры.Вставить("ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя",ФОбъект.ПарамФильтроватьРеализациюПоСкладуПлощадкиОтправителя);	
	//
	//Параметры.Вставить("ПарамПоставщикОрганизация",ФОбъект.ПарамПоставщикОрганизация);	
	//Параметры.Вставить("ПарамПоставщикХозСубъект",ФОбъект.ПарамПоставщикХозСубъект);	
	//Параметры.Вставить("ПарамПоставщикПлощадка",ФОбъект.ПарамПоставщикПлощадка);	
	//Параметры.Вставить("ПарамРазрешитьВводНаОснованииБолееОдногоВСД",ФОбъект.ПарамРазрешитьВводНаОснованииБолееОдногоВСД);
	//
	//Параметры.Вставить("ОтправлятьВФоне", ФОбъект.ОтправлятьВФоне);
	//Параметры.Вставить("ПарамПроизводствоЗаполнятьПоСправочнику", ФОбъект.ПарамПроизводствоЗаполнятьПоСправочнику);
	//Параметры.Вставить("ПарамПроизводствоЗаполнятьТчПоТчСерииПродукции", ФОбъект.ПарамПроизводствоЗаполнятьТчПоТчСерииПродукции);
	//
	//Параметры.Вставить("КодЛицензии", ФОбъект.КодЛицензии);
	//Параметры.Вставить("ОтключитьОтправкуСтатистики", ФОбъект.ОтключитьОтправкуСтатистики);
	//Параметры.Вставить("ПарамКонтроллироватьСрокГодностиПриОтправке", ФОбъект.ПарамКонтроллироватьСрокГодностиПриОтправке);
	//Параметры.Вставить("СрокГодностиДней", ФОбъект.СрокГодностиДней);
	//Параметры.Вставить("ПарамКонтроллироватьЗаполнениеУровнейУпаковки", ФОбъект.ПарамКонтроллироватьЗаполнениеУровнейУпаковки);
	//Параметры.Вставить("парамПричинаАннулирования", ФОбъект.парамПричинаАннулирования);
	//Параметры.Вставить("парамПричинаРасхождения", ФОбъект.парамПричинаРасхождения);
	//Параметры.Вставить("парамОписаниеНесоответствия", ФОбъект.парамОписаниеНесоответствия);
	//Параметры.Вставить("КоэфПересчетаКоличестваПриПроизводстве", ФОбъект.КоэфПересчетаКоличестваПриПроизводстве);
	//Параметры.Вставить("КоличествоДнейХраненияЗапросов",ФОбъект.КоличествоДнейХраненияЗапросов);
	
	Попытка 
		_НастройкиДляТекущегоПользователя = ФОбъект.флСохранятьНастройкиДляТекущегоПользователя; 
	Исключение 
		_НастройкиДляТекущегоПользователя = Ложь; 
	КонецПопытки;
	
	Возврат Параметры;

КонецФункции

Функция СохранитьПараметры(ВыбФорма, _ИмяПользователя = Неопределено) Экспорт
	
	КлючОбъекта = "Обработка.кб99_crpt.Форма.Форма";
	
	Если _ИмяПользователя = Неопределено Тогда
		_ИмяПользователя = ИмяПользователя();
	КонецЕсли;
	
	ПараметрыОрганизации = ПараметрыСервер( ВыбФорма );
	_НастройкиДляТекущегоПользователя = ВыбФорма.флСохранятьНастройкиДляТекущегоПользователя; 
		
	// Укажем в настройке пользователя, как будем хранить параметры - По пользователю или Организации
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  "Настройки_CRPT", _НастройкиДляТекущегоПользователя, , _ИмяПользователя);
	
	Если  _НастройкиДляТекущегоПользователя Тогда
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, ВыбФорма.Организация.УникальныйИдентификатор(), ПараметрыОрганизации, , _ИмяПользователя);  // Организация по пользователю
	Иначе
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, ВыбФорма.Организация.УникальныйИдентификатор(), ПараметрыОрганизации, , ВыбФорма.Организация.УникальныйИдентификатор());
	КонецЕсли;

    // имя пользователя - пользователь владелец настроек, если параметр не указать,
    // то настройки будут сохранены для ТЕКУЩЕГО пользователя
	
	//Если ВыбФорма.флСохранятьНастройкиДляТекущегоПользователя Тогда 
	//	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	//Иначе
	//	ТекПользователь = ВыбФорма.Организация;
	//КонецЕсли;
	//НайденныеПараметры = Справочники.кб99_Параметры.НайтиПоРеквизиту("Объект", ТекПользователь);
	//Если НайденныеПараметры=Справочники.кб99_Параметры.ПустаяСсылка() Тогда 
	//	спрПараметры = Справочники.кб99_Параметры.СоздатьЭлемент();
	//Иначе
	//	спрПараметры = НайденныеПараметры.ПолучитьОбъект();
	//КонецЕсли;
	//
	//спрПараметры.Заполнить( ПараметрыОрганизации );
	//СпрПараметры.Записать();
	
	Возврат ПараметрыОрганизации;
	
КонецФункции

Процедура ЗагрузитьПараметрыВОбработку(Объект, СписокПараметров) Экспорт
	Попытка
		ЗаполнитьЗначенияСвойств(Объект, СписокПараметров);
		
		//Если ПроверитьСуществованиеКаталога(Объект.КаталогИнтеграции) Тогда			
		//	Объект.КаталогЛогов = Объект.КаталогИнтеграции + "logs\";
		//	ПроверитьСуществованиеКаталога(Объект.КаталогЛогов);
		//КонецЕсли;
		
		Если Объект.Свойство("ПаузаСек") И НЕ(ЗначениеЗаполнено(Объект.ПаузаСек)) Тогда
			Объект.ПаузаСек=10;
		КонецЕсли;
							
	Исключение
		СообщитьИнфо("Используется несоответствующия версии cf и обработки -> Проведите полное обновление !");
	    СообщитьИнфо(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Функция НайтиПродукциюПоID(ID) Экспорт
	
	спрСсылка = Справочники.кб99_Продукция.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	кб99_Продукция.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.кб99_Продукция КАК кб99_Продукция
	|ГДЕ
	|	кб99_Продукция.id ПОДОБНО &id";
	Запрос.УстановитьПараметр("id", ID);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		спрСсылка = Выборка.Ссылка;	
	КонецЦикла;
	
	Возврат спрСсылка;
	
КонецФункции

Функция АдресЭлектроннойПочтыЗаполнен() Экспорт
	
	Возврат ЗначениеЗаполнено(Константы.АдресЭлектроннойПочты.Получить());
	
КонецФункции

Функция ПолучитьСтруктуруПараметров() Экспорт
	
	ПараметрыОрганизации = кб99_Общие.НайтиПараметры( ПараметрыСеанса.ТекущийПользователь );
	
	Структура = Новый Структура();      
	
	Для Каждого Реквизит Из ПараметрыОрганизации.Метаданные().Реквизиты Цикл
        Структура.Вставить(Реквизит.Имя, ПараметрыОрганизации[Реквизит.Имя]);
    КонецЦикла;     
     
    Возврат Структура;
	
КонецФункции

#КонецОбласти

Функция ПолучитьИдентификаторПеречисления(ЗначПеречисления) Экспорт
	// присвоим переменной значение перечисления
	// например перечисления.ставкиНДС.НДС18 
	// ИЛИ например Док.СтавкаНДС 
	// НужноеЗначение = Какое_то_Значение_Перечисления; 

	// теперь получаем как названо перечисление в конфигураторе
	ИмяПеречисления = ЗначПеречисления.Метаданные().Имя;

	// теперь получим индекс где хранится то что нам надо
	НужныйИндекс = Перечисления[ИмяПеречисления].Индекс(ЗначПеречисления);

	// И вот счастье. то что нам надо - идентификатор!!! всего-то четыре строчки кода
	// вместо Какое_то_Значение_Перечисления.Идентификатор() в 7.7
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[НужныйИндекс].Имя;
	
КонецФункции

Функция ДатаВремяXML(ВыбДата) Экспорт
	стрДата = формат(ВыбДата, "ДФ=""гггг-ММ-дд""")+"T"+Формат(ВыбДата,"ДФ=ЧЧ:мм:сс");
	Возврат стрДата;
КонецФункции

Функция НайтиПоследнийЗапрос( Объект ) Экспорт 
	
	Отбор = Новый Структура;
	Отбор.Вставить("Объект", Объект);
	Результат = РегистрыСведений.кб99_исмп_СтатусыДокументов.ПолучитьПоследнее(ТекущаяДата(), Отбор );
	
	Возврат Результат;
КонецФункции

Функция ПолучитьИнфоКМ( Объект ) Экспорт 
	Отбор = Новый Структура;
	Отбор.Вставить("КМ", Объект.Ссылка);
	Инфо = РегистрыСведений.кб99_КодыМаркировки.ПолучитьПоследнее(ТекущаяДата(), Отбор );
	Возврат Инфо;
КонецФункции

Функция НайтиКМ( СтрокаКМ, НаименованиеПродукции = Неопределено ) Экспорт
	
	//Ответ = Справочники.кб99_КодыМаркировки.НайтиПоРеквизиту("uit", СтрокаКМ );
	Ответ = Справочники.кб99_КодыМаркировки.НайтиПоНаименованию( СтрокаКМ );
	Если Ответ = Справочники.кб99_КодыМаркировки.ПустаяСсылка() Тогда 
		СпрОб = Справочники.кб99_КодыМаркировки.СоздатьЭлемент();
		СпрОб.Наименование = СтрокаКМ;
		Если НаименованиеПродукции <> Неопределено Тогда
			СпрОб.Продукция = НайтиПродукцию(НаименованиеПродукции);
		Иначе
			СпрОб.Продукция = кб99_crpt.ЗагрузитьСведенияОПродукцииПоКМ(СпрОб);
		КонецЕсли;	
		СпрОб.Наименование = СтрокаКМ;
		СпрОб.uit = СтрокаКМ;
		СпрОб.Упаковка = Ложь;
		СпрОб.ОргВладелец = ПолучитьОрганизациюПоУмолчанию();
		СпрОб.СтатусКМ = Перечисления.кб99_СтатусКМ.INTRODUCED;
		СпрОб.Записать();
		Ответ = СпрОб.Ссылка;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция НайтиКмПоНаименованию(НаименованиеКМ) Экспорт
	
	Возврат Справочники.кб99_КодыМаркировки.НайтиПоНаименованию(НаименованиеКМ, Истина);
	
КонецФункции

Функция НайтиКмТоварнойУпаковки( КмТоварнойУпаковки, ВложенныеКоды ) Экспорт
	
	Ответ = Справочники.кб99_КодыМаркировки.НайтиПоНаименованию( КмТоварнойУпаковки );
	Если Ответ = Справочники.кб99_КодыМаркировки.ПустаяСсылка() Тогда 
		СпрОб = Справочники.кб99_КодыМаркировки.СоздатьЭлемент();
		//СпрОб.Наименование = Название;
		СпрОб.Наименование = КмТоварнойУпаковки;
		СпрОб.uit = КмТоварнойУпаковки;
		СпрОб.Упаковка = Истина;
		СпрОб.СтатусКМ = Перечисления.кб99_СтатусКМ.INTRODUCED;
		СпрОб.gtin = "(00)"+КмТоварнойУпаковки;
		СпрОб.ОргВладелец = ПолучитьОрганизациюПоУмолчанию();
		Если ВложенныеКоды.Количество > 0 Тогда
			СпрОб.ВложенныеКодыМаркировки.Очистить();
			Для Каждого КИТУ Из ВложенныеКоды Цикл
				НовВложенныйКод = СпрОб.ВложенныеКодыМаркировки.Добавить();
				НовВложенныйКод.КодМаркировки = НайтиКМ(КИТУ["uit_code"], КИТУ["product_description"]);
			КонецЦикла;
		КонецЕсли;
		СпрОб.Записать();
		Ответ = СпрОб.Ссылка;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция НайтиПродукцию( НаименованиеПродукции ) Экспорт
	
	Ответ = Справочники.кб99_Продукция.НайтиПоНаименованию( НаименованиеПродукции );
	Если Ответ = Справочники.кб99_КодыМаркировки.ПустаяСсылка() Тогда 
		СпрОб = Справочники.кб99_Продукция.СоздатьЭлемент();
		СпрОб.Наименование = НаименованиеПродукции;
		СпрОб.Записать();
		Ответ = СпрОб.Ссылка;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция НайтиПродукциюПоGTIN(GTIN) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	кб99_Продукция.Ссылка КАК ПродукцияСсылка
	|ИЗ
	|	Справочник.кб99_Продукция КАК кб99_Продукция
	|ГДЕ
	|	кб99_Продукция.GTIN ПОДОБНО &GTIN
	|	И НЕ кб99_Продукция.ПометкаУдаления";
	Запрос.УстановитьПараметр("GTIN", GTIN);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат =  Выборка.ПродукцияСсылка;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьДокумент( Знач ДокСсылка ) Экспорт
	
	Докобъект = ДокСсылка.ПолучитьОбъект();
	ДокОбъект.Записать();
	
КонецПроцедуры

Процедура УстановитьЗначенияРеквизитовФормы(Форма) Экспорт
	
	Параметры = ПолучитьСтруктуруПараметров();
	
	Форма.ИспользоватьПодключаемоеОборудование = Параметры.ИспользоватьПодключаемоеОборудование;
	Форма.ЗаписыватьДокументПриСканировании = Параметры.ЗаписыватьДокументПриСканировании;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеДокумента(ДокСсылка) Экспорт
	
	ДокОбъект = ДокСсылка.ПолучитьОбъект();
	Возврат ДокОбъект.ПроверитьЗаполнение();
	
КонецФункции
