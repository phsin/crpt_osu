&НаКлиенте
Перем мПредставлениеПустогоРасписания;

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КлючОбъекта = "ОбщаяФорма.кб99_РегламентноеЗадание";
	Попытка
		СписокЗаданийОтправкаВСДИзХранилища = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, "СписокЗаданийОтправкаВСДТранзакции",, ИмяПользователя());
		Если СписокЗаданийОтправкаВСДИзХранилища <> Неопределено Тогда
			Для Каждого Задание Из СписокЗаданийОтправкаВСДИзХранилища Цикл
				стрЗадание = СписокЗаданийОтправкаВСДТранзакции.Добавить();
				ЗаполнитьЗначенияСвойств(стрЗадание, Задание);
			КонецЦикла;
		КонецЕсли;
	Исключение
		кб99_Общие.СообщитьИнфо("Не удалось получить список регламентных заданий по отправке ВСД2 Транзакции"+Символы.ПС+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мПредставлениеПустогоРасписания = Строка(Новый РасписаниеРегламентногоЗадания);
	ОбновитьПредставлениеРасписания();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПолучитьОтветИСМП" Тогда
		СтруктураОтбора = Новый Структура("Организация, Идентификатор", Параметр.Организация, Параметр.Идентификатор);
		НайденныеСтроки = СписокЗаданийОтправкаВСДТранзакции.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НовСтрока = СписокЗаданийОтправкаВСДТранзакции.Добавить();
		Иначе
			НовСтрока = НайденныеСтроки[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(новСтрока, Параметр);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		Если ЗаписатьПараметрыРегламентногоЗадания() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Сохранить(Команда)

	Если ЗаписатьПараметрыРегламентногоЗадания() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаписатьПараметрыРегламентногоЗадания()
	
	НайденыОшибки = Ложь;
	КлючОбъекта = "ОбщаяФорма.кб99_РегламентноеЗаданиеГашение";
	
	МассивЗаданий = Новый Массив;
	Для Каждого Стр Из СписокЗаданийОтправкаВСДТранзакции Цикл
		СтруктураЗадания = Новый Структура("Использование, Организация, Наименование, Расписание, Идентификатор");
		ЗаполнитьЗначенияСвойств(СтруктураЗадания, Стр);
		МассивЗаданий.Добавить(СтруктураЗадания);
	КонецЦикла;
	
	Попытка
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  "СписокЗаданийОтправкаВСДТранзакции", МассивЗаданий,, ИмяПользователя());
	Исключение
		кб99_Общие.СообщитьИнфо("Не удалось сохранить данные по регламентным заданиям ""Отправка ВСД Транзакции"""+Символы.ПС+ОписаниеОшибки());	
		НайденыОшибки = Истина;	
	КонецПопытки;
	
	Если Не НайденыОшибки Тогда
		Модифицированность = Ложь;
	    Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НайтиРегламентноеЗадание(НаименованиеРегламентногоЗадания)
	
	РегламентноеЗаданиеОбъект = Неопределено;
	
	Отбор = Новый Структура("Наименование", НаименованиеРегламентногоЗадания);
	МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	Если МассивЗаданий.Количество() <> 0 Тогда
		РегламентноеЗаданиеОбъект = МассивЗаданий[0];
	КонецЕсли;
	
	Возврат РегламентноеЗаданиеОбъект;
	
КонецФункции

&НаСервере
Функция СоздатьРегламентноеЗаданиеПриНеобходимости(НаименованиеРегламентногоЗадания)
	
	РегламентноеЗаданиеОбъект = НайтиРегламентноеЗадание(НаименованиеРегламентногоЗадания);
	
	// при необходимости создаем регл. задание
	Если РегламентноеЗаданиеОбъект = Неопределено Тогда
		РегламентноеЗаданиеОбъект = РегламентныеЗадания.СоздатьРегламентноеЗадание(НаименованиеРегламентногоЗадания);
		РегламентноеЗаданиеОбъект.Наименование = НаименованиеРегламентногоЗадания;
	КонецЕсли;
	
	Возврат РегламентноеЗаданиеОбъект;
	
КонецФункции

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ИмяРасписания = ""+Команда.Имя;
	
	//Если ИмяРасписания = "НастроитьРасписаниекб99_ВСД_УдалитьЗапросы" Тогда
	//	РасписаниеРегламентногоЗадания = РасписаниеРегламентногоЗаданияКб99_ВСД_УдалитьЗапросы;
	//ИначеЕсли ИмяРасписания = "НастроитьРасписаниекб99_ОчиститьВнешнююПапкуСлогФайлами" Тогда
	//	РасписаниеРегламентногоЗадания = РасписаниеРегламентногоЗаданияКБ99_ОчиститьВнешнююПапкуСЛогФайлами;
	//ИначеЕсли ИмяРасписания = "НастроитьРасписаниеКб99_ОбновитьСтатусыВСД" Тогда
	//	РасписаниеРегламентногоЗадания = РасписаниеРегламентногоЗаданияКб99_ОбновитьСтатусыВСД;
	//ИначеЕсли ИмяРасписания = "НастроитьРасписаниеКб99_ПолучитьАктуальныеПартии" Тогда
	//	РасписаниеРегламентногоЗадания = РасписаниеРегламентногоЗаданияКб99_ПолучитьАктуальныеПартии;
	//КонецЕсли;

	//РедактированиеРасписаниеРегламентногоЗадания(ИмяРасписания,РасписаниеРегламентногоЗадания);

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписаниеРегламентногоЗадания(ИмяРасписания,РасписаниеРегламентногоЗадания)
	
	
	// если расписание не инициализировано в форме на сервере, то создаем новое
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ПараметрыФункции = Новый Структура("ИмяРасписания", ИмяРасписания);
	// открываем диалог для редактирования Расписания
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РедактированиеРасписанияРегламентногоЗаданияПродолжение",       
		ЭтаФорма, ПараметрыФункции);  
		
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияПродолжение (Расписание, ПараметрыФункции) Экспорт
	
	//Если Расписание <> Неопределено Тогда 
	//	Если  ПараметрыФункции.ИмяРасписания = "НастроитьРасписаниекб99_ВСД_УдалитьЗапросы" Тогда
	//		РасписаниеРегламентногоЗаданияКб99_ВСД_УдалитьЗапросы = Расписание;	
	//	ИначеЕсли ПараметрыФункции.ИмяРасписания = "НастроитьРасписаниекб99_ОчиститьВнешнююПапкуСлогФайлами" Тогда 
	//		РасписаниеРегламентногоЗаданияКБ99_ОчиститьВнешнююПапкуСЛогФайлами = Расписание;
	//	ИначеЕсли ПараметрыФункции.ИмяРасписания = "НастроитьРасписаниеКб99_ОбновитьСтатусыВСД" Тогда
	//		РасписаниеРегламентногоЗаданияКб99_ОбновитьСтатусыВСД = Расписание;
	//	ИначеЕсли ПараметрыФункции.ИмяРасписания = "НастроитьРасписаниеКб99_ПолучитьАктуальныеПартии" Тогда
	//		РасписаниеРегламентногоЗаданияКб99_ПолучитьАктуальныеПартии = Расписание;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеРасписания()
	
	////Очистить РС
	//ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗаданияКб99_ВСД_УдалитьЗапросы);
	//Если ПредставлениеРасписания = мПредставлениеПустогоРасписания Тогда
	//	ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
	//КонецЕсли;
	//Элементы.НастроитьРасписаниекб99_ВСД_УдалитьЗапросы.Заголовок = ПредставлениеРасписания;
	//
	////ОчиститьВнешнююПапкуСЛогФайлами
	//ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗаданияКБ99_ОчиститьВнешнююПапкуСЛогФайлами);
	//Если ПредставлениеРасписания = мПредставлениеПустогоРасписания Тогда
	//	ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
	//КонецЕсли;
	//Элементы.НастроитьРасписаниекб99_ОчиститьВнешнююПапкуСлогФайлами.Заголовок = ПредставлениеРасписания;
	//
	////ПолучитьАктуальныеПартии
	//ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗаданияКб99_ПолучитьАктуальныеПартии);
	//Если ПредставлениеРасписания = мПредставлениеПустогоРасписания Тогда
	//	ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
	//КонецЕсли;
	//Элементы.НастроитьРасписаниеКб99_ПолучитьАктуальныеПартии.Заголовок = ПредставлениеРасписания;

	////Обновить статусы ВСД
	//ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗаданияКб99_ОбновитьСтатусыВСД);
	//Если ПредставлениеРасписания = мПредставлениеПустогоРасписания Тогда
	//	ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
	//КонецЕсли;
	//Элементы.НастроитьРасписаниеКб99_ОбновитьСтатусыВСД.Заголовок = ПредставлениеРасписания;

КонецПроцедуры

#Область ОтправкаВСДТранзакция

&НаКлиенте
Процедура ДобавитьСкопироватьИзменитьРегламентноеЗаданиеПолучитьОтветИСМП(Знач Действие)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", Действие);
	
	Если Действие <> "Добавить" Тогда
		Если Элементы.СписокЗаданийОтправкаВСДТранзакции.ТекущиеДанные = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите регламентное задание.'"));
			Возврат;
		Иначе
			ПараметрыФормы.Вставить("Идентификатор", Элементы.СписокЗаданийОтправкаВСДТранзакции.ТекущиеДанные.Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.кб99_РегламентноеЗадание_ПолучитьОтветИСМП", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаданиеОтправкаВСДТранзакция(Команда)
	
	ДобавитьСкопироватьИзменитьРегламентноеЗаданиеПолучитьОтветИСМП("Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаданийОтправкаВСДТранзакцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СписокЗаданийОтправкаВСДТранзакцииИспользование"
					ИЛИ Поле.Имя = "СписокЗаданийОтправкаВСДТранзакцииНаименование"	
					ИЛИ Поле.Имя = "СписокЗаданийОтправкаВСДТранзакцииИдентификатор"	
					ИЛИ Поле.Имя = "СписокЗаданийОтправкаВСДТранзакцииРасписание" Тогда
		
		ДобавитьСкопироватьИзменитьРегламентноеЗаданиеПолучитьОтветИСМП("Изменить");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаданийОтправкаВСДТранзакцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	
	ДобавитьСкопироватьИзменитьРегламентноеЗаданиеПолучитьОтветИСМП(?(Копирование, "Скопировать", "Добавить"));

КонецПроцедуры

&НаКлиенте
Процедура СписокЗаданийОтправкаВСДТранзакцииПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.СписокЗаданийОтправкаВСДТранзакции.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите одно регламентное задание.'"));
	Иначе
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ТаблицаРегламентныеЗаданияОтправкаВСДПередУдалениемЗавершение", ЭтотОбъект),
			НСтр("ru = 'Удалить регламентное задание?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияОтправкаВСДПередУдалениемЗавершение(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьРегламентноеЗаданиеОтправкаВСДВыполнитьНаСервере(
			Элементы.СписокЗаданийОтправкаВСДТранзакции.ТекущиеДанные.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРегламентноеЗаданиеОтправкаВСДВыполнитьНаСервере(Знач Идентификатор)
	
	Строка = СписокЗаданийОтправкаВСДТранзакции.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор))[0];
	РегламентныеЗаданияСервер.УдалитьРегламентноеЗадание(Идентификатор);
	СписокЗаданийОтправкаВСДТранзакции.Удалить(СписокЗаданийОтправкаВСДТранзакции.Индекс(Строка));
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаданийОтправкаВСДТранзакцииПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область Производство

&НаКлиенте
Процедура ДобавитьСкопироватьИзменитьРегламентноеЗаданиеПроизводство(Знач Действие)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", Действие);
	
	Если Действие <> "Добавить" Тогда
		Если Элементы.СписокЗаданийПроизводство.ТекущиеДанные = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите регламентное задание.'"));
			Возврат;
		Иначе
			ПараметрыФормы.Вставить("Идентификатор", Элементы.СписокЗаданийПроизводство.ТекущиеДанные.Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.кб99_РегламентноеЗаданиеПроизводство", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаданийПроизводствоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СписокЗаданийПроизводствоИспользование"
				ИЛИ Поле.Имя = "СписокЗаданийПроизводствоНаименование"	
				ИЛИ Поле.Имя = "СписокЗаданийПроизводствоИдентификатор"	
				ИЛИ Поле.Имя = "СписокЗаданийПроизводствоРасписание" Тогда
		
		ДобавитьСкопироватьИзменитьРегламентноеЗаданиеПроизводство("Изменить");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокЗаданийПроизводствоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДобавитьСкопироватьИзменитьРегламентноеЗаданиеПроизводство(?(Копирование, "Скопировать", "Добавить"));

КонецПроцедуры

&НаКлиенте
Процедура СписокЗаданийПроизводствоПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаданийПроизводствоПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.СписокЗаданийПроизводство.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите одно регламентное задание.'"));
	Иначе
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ТаблицаРегламентныеЗаданияПроизводствоЗавершение", ЭтотОбъект),
			НСтр("ru = 'Удалить регламентное задание?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаданиеПроизводство(Команда)
	
	ДобавитьСкопироватьИзменитьРегламентноеЗаданиеПроизводство("Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияПроизводствоЗавершение(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьРегламентноеЗаданиеПроизводствоНаСервере(
			Элементы.СписокЗаданийПроизводство.ТекущиеДанные.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРегламентноеЗаданиеПроизводствоНаСервере(Знач Идентификатор)
	
	Строка = СписокЗаданийПроизводство.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор))[0];
	РегламентныеЗаданияСервер.УдалитьРегламентноеЗадание(Идентификатор);
	СписокЗаданийПроизводство.Удалить(СписокЗаданийПроизводство.Индекс(Строка));
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти
