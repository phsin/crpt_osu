
&НаКлиенте
Процедура ОсновнаяОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) И ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Наименование = кб99_Общие.ПолучитьЗначениеРевизитаОбъекта_НаСервере(Объект.Организация, "Наименование");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыбратьСертификатНаСервере()
	
    CAPICOM_CURRENT_USER_STORE = 2; //2 - Искать сертификат в ветке "Личное" хранилища.
    CAPICOM_MY_STORE = "My"; // Указываем, что ветку "Личное" берем из хранилища текущего пользователя
    CAPICOM_STORE_OPEN_READ_ONLY = 0; // Открыть хранилище только на чтение

    oStore = Новый COMОбъект("CAdESCOM.Store");// .Store(); // Объект описывает хранилище сертификатов
    oStore.Open( CAPICOM_CURRENT_USER_STORE, CAPICOM_MY_STORE, CAPICOM_STORE_OPEN_READ_ONLY ); // Открыть хранилище сертификатов
    // 1 вариант: поиск сертификата по отпечатку
    //var CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0;
    //var Certificates = oStore.Certificates.Find(CAPICOM_CERTIFICATE_FIND_SHA1_HASH, sThumbprint);
    //var Result = Certificates.Item(1);
    //2 вариант: обходом по коллекции и сравнение с отпечатком            
    //last = "";
	Certs = oStore.Certificates;
	
	сзСертификаты = Новый СписокЗначений;
	для каждого Сертификат из Certs Цикл
		Result = Сертификат;
		сзСертификаты.Добавить( Сертификат.Thumbprint, Сертификат.SubjectName);
	КонецЦикла;
    oStore.Close(); // Закрыть хранилище сертификатов и освободить объект 61
    Возврат сзСертификаты;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьСертификат(Команда)
	
	сзСертификаты = ВыбратьСертификатНаСервере();
	ОписаниеОповещения = Новый ОписаниеОповещения("СписокСертификатовВыбор", ЭтаФорма );
	ПоказатьВыборИзСписка( ОписаниеОповещения, сзСертификаты );	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатовВыбор(ЗначениеВыбора, ДопПараметры) Экспорт

	Если ЗначениеВыбора = Неопределено Тогда
		//ВыбЭлемент = Ложь;
	Иначе 
		Объект.Отпечаток = ЗначениеВыбора.Значение;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьТокенНаСервере()
	
	//Токен = кб99_crpt.Reg( Объект.Отпечаток, Ложь, Истина);
	Токен = кб99_crpt.Reg( Объект.Ссылка );
	Объект.Токен = Токен;
	
	Если Токен <> Неопределено Тогда
		Объект.СрокДействияТокена = ТекущаяДата()+36000;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокенНаКлиенте()
	
	//Токен = кб99_crpt.Reg( Объект.Отпечаток, Ложь, Истина);
	Токен = кб99_crpt_НаКлиенте.Reg( Объект );
	Объект.Токен = Токен;
	Объект.clientToken = Токен;
	
	Если Токен <> Неопределено Тогда
		Объект.СрокДействияТокена = ТекущаяДата()+36000;	
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПолучитьКлиентскийТокенНаСервере()
	
	clientToken = кб99_crpt.RegSuz_GisMt( Объект.Отпечаток, Объект.ИдентификаторСоединения, Ложь, Истина );
	Объект.clientToken = clientToken;
	
	Если clientToken <> Неопределено Тогда
		Объект.СрокДействияТокена = ТекущаяДата()+36000;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКлиентскийТокенНаКлиенте()
	
	clientToken = кб99_crpt.RegSuz_GisMt( Объект.Отпечаток, Объект.ИдентификаторСоединения, Ложь, Истина );
	Объект.clientToken = clientToken;
	
	Если clientToken <> Неопределено Тогда
		Объект.СрокДействияТокена = ТекущаяДата()+36000;	
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПроверитьДоступностьСУЗНаСервере()

	//кб99_crpt.СУЗПроверитьДоступностьНаСервере( Объект.Отпечаток, Объект.clientToken, Объект.OmsId, Истина);
	кб99_crpt.СУЗПроверитьДоступностьНаСервере( Объект.Ссылка );

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьСУЗ(Команда)
	ПроверитьДоступностьСУЗНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТокенДоступа(Команда)
	
	Если ЗначениеЗаполнено(Объект.Отпечаток)
			И ЗначениеЗаполнено(Объект.ИдентификаторСоединения) Тогда
			
		//ПолучитьКлиентскийТокенНаСервере();	
		//ПолучитьТокенНаСервере();
		
		//ПолучитьКлиентскийТокенНаКлиенте();
		ПолучитьТокенНаКлиенте();
		
		ЭтаФорма.Записать();
	Иначе
		кб99_Общие.СообщитьИнфо("Указаны не все параметры для обновления токена, проверьте заполнение параметров ""Отпечаток"" и ""Идентификатор Соединения"" ");	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура кнВыполнитьИнициализациюНаСервере()
	
	ПараметрыОрганизации = кб99_Общие.ПолучитьСтруктуруПараметров();
	ПараметрыОрганизации.Вставить("ОтладкаЗапросовXML", Ложь);
	ПараметрыОрганизации.Вставить("ОтключитьОтправкуСтатистики", Ложь);
	ПараметрыОрганизации.Вставить("ВыводитьПодробнуюИнформацию", Истина);
	ПараметрыОрганизации.Вставить("КаталогЛогов", "");

	//кб99_ВСД_Запросы.Площадка_ЗагрузитьПоХозСубъекту(ПараметрыОрганизации) ;

КонецПроцедуры

&НаКлиенте
Процедура кнВыполнитьИнициализацию(Команда)
	
	ЭтаФорма.Записать();
	
	ПоказатьОповещениеПользователя("Выполняем запрос",,"Ожидайте...",БиблиотекаКартинок.ДлительнаяОперация16);
	
	кнВыполнитьИнициализациюНаСервере();
	
	ПоказатьОповещениеПользователя("Операция завершена");

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСервисПровайдеров(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.OmsId) Тогда
		кб99_Общие.СообщитьИнфо("Не заполнен реквизит ""OmsId""",,Элементы.OmsId);
		Возврат;
	КонецЕсли;
	
	кб99_crpt.СузПолучитьСервисПровайдера();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПодключаемоеОборудованиеПриИзменении(Элемент)
	
	ИнициализацияДрайверов();
	УстановитьВидимостьЭлементовФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПодключаемоеОборудование(Команда)
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка");

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	
	Элементы.ПодключаемоеОборудование.Видимость = Объект.ИспользоватьПодключаемоеОборудование;
	Элементы.ЗаписыватьДокументПриСканировании.Видимость = Объект.ИспользоватьПодключаемоеОборудование;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияДрайверов()
	
	Если Объект.ИспользоватьПодключаемоеОборудование Тогда
		МенеджерОборудования.ОбновитьПоставляемыеДрайвера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЛичныйКабинет(Команда)
	Попытка
		Если Объект.ТестовыйКонтур Тогда 
			ПутьКСправке = "https://markirovka.sandbox.crptech.ru/";
		Иначе 
			ПутьКСправке = "https://markirovka.crpt.ru/";
		КонецЕсли;
	    Оповещение = Новый ОписаниеОповещения("ЗапускПриложения", ЭтотОбъект);
	    НачатьЗапускПриложения(Оповещение, ПутьКСправке,, Истина);		
	Исключение 
		кб99_Общие.СообщитьИнфо(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ЗапускПриложения(КодВозврата, ДополнительныйПараметр) Экспорт

    а = 1;
    
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРегламентноеЗадание(Команда)
	
	ОткрытьФорму("ОбщаяФорма.кб99_РегламентныеЗадания");
	
КонецПроцедуры
